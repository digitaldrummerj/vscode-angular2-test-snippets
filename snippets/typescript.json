// Version 0.4.1 - 2016-09-26
{
    "Class unit test without TestBed": {
        "prefix": "ng2-test-without-testbed",
        "description": "Recipe for an isolated unit test (i.e. class, function) without TestBed",
        "body": [
            "/*",
            " * Testing a TypeScript class",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#testing-without-atp",
            " */",
            "",
            "import { ${EnterAClassName} } from './${filename:enter-a-file-name}';",
            "",
            "describe('${EnterAClassName}', () => {",
            "    beforeEach(() => {",
            "        // write your set up here",
            "    });",
            "",
            "    it('${assertion:should enter the assertion}', () => {",
            "        expect(${value:enterAValue}).toBe(${result:enterTheExpectedResult});",
            "        // expect('1').toEqual(1);",
            "    });",
            "});"
        ]
    },

    "Component Test Recipe": {
        "prefix": "ng2-test-component",
        "description": "Recipe for testing a simple Component in Angular 2",
        "body": [
            "/*",
            " * Testing a simple Angular 2 component",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#simple-component-test",
            " */",
            "",
            "import { TestBed } from '@angular/core/testing';",
            "import { By } from '@angular/platform-browser';",
            "import { DebugElement } from '@angular/core';",
            "",
            "import { ${EnterTheComponentName} } from './${filename:enter-the-file-name}.component';",
            "",
            "describe('${EnterTheComponentName}', () => {",
            "    let fixture, comp, el;",
            "",
            "    beforeEach(() => {",
            "        TestBed.configureTestingModule({",
            "            declarations: [${EnterTheComponentName}],",
            "            providers: []",
            "        });",
            "",
            "        fixture = TestBed.createComponent(${EnterTheComponentName});",
            "        comp = fixture.componentInstance;",
            "",
            "        // el = fixture.debugElement.query(By.css('h1'));",
            "    });",
            "",
            "    it('${assertion:should enter the assertion}', () => {",
            "        fixture.detectChanges();",
            "        // expect(el.nativeElement.textContent).toContain('Test Title');",
            "        // expect((fixture.debugElement.classes as any).className).toBe(true);",
            "        expect(${value:enterAValue}).toBe(${result:enterTheExpectedResult});",
            "    });",
            "});"
        ]
    },

    "Component with Route and Spy Test Recipe": {
        "prefix": "ng2-test-component-routed",
        "description": "Recipe for testing a Component with asynchronous Service dependency in Angular 2",
        "body": [
            "/*",
            " * Testing a Component with Router and Spy",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#routed-component-w-param",
            " */",
            "import { TestBed, async, inject } from '@angular/core/testing';",
            "import { Router } from '@angular/router';",
            "import { ChangeDetectorRef } from '@angular/core';",
            "",
            "import { ${EnterTheComponentName} } from './${filename:enter-the-file-name}.component';",
            "",
            "describe('${EnterTheComponentName}', () => {",
            "    class RouterStub {",
            "        navigate(path: Array<any>) { }",
            "    }",
            "",
            "    let fakeChangeDetectorRef = {",
            "        markForCheck: () => { }",
            "    };",
            "",
            "    let fixture, comp;",
            "",
            "    beforeEach(async(() => {",
            "        TestBed.configureTestingModule({",
            "            declarations: [",
            "                ${EnterTheComponentName}",
            "            ],",
            "            providers: [",
            "                { provide: Router, useClass: RouterStub },",
            "                { provide: ChangeDetectorRef, useValue: fakeChangeDetectorRef },",
            "                ${EnterTheComponentName}",
            "            ]",
            "        })",
            "        .compileComponents()",
            "        .then(() => {",
            "            fixture = TestBed.createComponent(${EnterTheComponentName});",
            "            comp = fixture.componentInstance;",
            "            fixture.detectChanges();",
            "        });",
            "    }));",
            "",
            "    it('${assertion:should enter the assertion}', inject([Router], (router: Router) => {",
            "        const spy = spyOn(router, 'navigate');",
            "",
            "        comp.${enterAMethodToCall}(${methodArguments});",
            "",
            "        expect(spy.calls.mostRecent().args[0]).toEqual([ '/' ]);",
            "        // expect(spy.calls.mostRecent().args[1].queryParams.paramName).toEqual('value');",
            "    }));",
            "});"
        ]
    },

    "Directive Test Recipe": {
        "prefix": "ng2-test-directive",
        "description": "Recipe for testing a Directive in Angular 2",
        "body": [
            "/*",
            " * Testing an Angular directive",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#pipes",
            " */",
            "",
            "import { Component } from '@angular/core';",
            "import { TestBed, async } from '@angular/core/testing';",
            "import { By } from '@angular/platform-browser';",
            "",
            "import { ${EnterTheDirectiveName} } from './${filename:enter-the-file-name}.directive';",
            "",
            "@Component({",
            "    selector: 'container',",
            "    template: `<div ${selector:Enter the directive selector} class=\"inside\">Container content</div>`",
            "})",
            "export class Container { }",
            "",
            "describe('${EnterTheDirectiveName}', () => {",
            "    beforeEach(() => {",
            "        TestBed.configureTestingModule({",
            "            declarations: [",
            "                ${EnterTheDirectiveName},",
            "                Container",
            "            ],",
            "        });",
            "    });",
            "",
            "    it('${assertion:should enter the assertion}', async(() => {",
            "        TestBed.compileComponents().then(() => {",
            "            let fixture  = TestBed.createComponent(Container);",
            "            fixture.detectChanges();",
            "            let compiled = fixture.debugElement.nativeElement;",
            "",
            "            // you may also try By.all or By.directive(directive)",
            "            // let el = fixture.debugElement.query(By.css('.inside'));",
            "",
            "            // expect(el.nativeElement.textContent).toContain('some text in here');",
            "            expect(${value:enterAValue}).toBe('${result:enterTheExpectedResult}');",
            "",
            "            // more matches here: https://goo.gl/hDEt05",
            "        });",
            "    }));",
            "});"
        ]
    },

    "Pipe Test Recipe": {
        "prefix": "ng2-test-pipe",
        "description": "Recipe for testing a Pipe in Angular 2",
        "body": [
            "/*",
            " * Testing an Angular 2 pipe",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#pipes",
            " */",
            "",
            "import { ${EnterThePipeName} } from './${filename:enter-the-file-name}.pipe';",
            "",
            "describe('${EnterThePipeName}', () => {",
            "    var pipe;",
            "",
            "    beforeEach(() => {",
            "        pipe = new ${EnterThePipeName}();",
            "    });",
            "",
            "    it('${assertion:should enter the assertion}', () => {",
            "        expect(pipe.transform(${value:enterAValue})).toBe('${result:enterTheExpectedResult}');",
            "    });",
            "});"
        ]
    },

    "Observable Test Recipe": {
        "prefix": "ng2-test-observable",
        "description": "Recipe for testing an Observable in Angular 2",
        "body": [
            "/*",
            " * Testing an Observable",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#observable-tests",
            " */",
            "describe('${testDescription:Enter a description}', () => {",
            "    let obs$;",
            "",
            "    beforeEach(() => {",
            "        // example below emits 2 values from an array",
            "        obs$ = Observable.from([",
            "            {id: 10, name: 'Galo'},",
            "            {id: 20, name: 'Blue Team'}",
            "        ]);",
            "    });",
            "",
            "    it('${assertion1:should enter an assertion on the observable}', () => {",
            "        expect(obs$ instanceof Observable).toBe(true);",
            "    });",
            "",
            "    it('${assertion1:should enter an assertion on the subscription}', done => {",
            "        var steps = [];",
            "         // example below receives values twice",
            "        obs$.subscribe(value => {",
            "            steps.push(value);",
            "",
            "            if (steps.length === 2) {",
            "                done();",
            "            }",
            "        });",
            "    });",
            "});"
        ]
    },

    "Redux State Test Recipe": {
        "prefix": "ng2-test-redux",
        "description": "Recipe for testing Redux pattern in Angular 2",
        "body": [
            "/*",
            " * Testing a Redux action based on ng2-redux",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#inject",
            " *       and: https://github.com/angular-redux/ng2-redux/",
            " */",
            "import { TestBed, async, inject } from '@angular/core/testing';",
            "import { NgRedux } from 'ng2-redux';",
            "",
            "import { AppState } from '../store';",
            "import { rootReducer } from '../reducers';",
            "import { ${EnterTheActionsClass} } from '../actions/${filename:enter-the-file-name}.actions';",
            "",
            "describe('${EnterTheActionsClass}', () => {",
            "    let reduxFactory = () => {",
            "        let ngRedux = new NgRedux<AppState>();",
            "        ngRedux.configureStore(rootReducer, undefined);",
            "        return ngRedux;",
            "    };",
            "",
            "    beforeEach(async(() => {",
            "        TestBed.configureTestingModule({",
            "            providers: [",
            "                { provide: NgRedux, useFactory: reduxFactory},",
            "                ${EnterTheActionsClass}",
            "            ]",
            "        });",
            "    }));",
            "",
            "    it('should update queryParams', inject(",
            "        [NgRedux, ${EnterTheActionsClass}],",
            "        (ngRedux: NgRedux<AppState>, ${actionsObj:enterTheActionsObject}: ${EnterTheActionsClass}) => {",
            "            ${actionsObj}.${actionMethod:enterTheActionMethod}(${args:enterArguments});",
            "",
            "            ngRedux.select([ '${statePath:enterThePath}' ])",
            "                .subscribe(value => {",
            "                    expect(value).toEqual(${result:enterTheExpectedResult});",
            "                });",
            "        }));",
            "});"
        ]
    },

    "Component with Services Test Recipe": {
        "prefix": "ng2-test-component-service",
        "description": "Recipe for testing a Routed Component in Angular 2",
        "body": [
            "/*",
            " * Testing a Component with async services",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#component-with-async-service",
            " */",
            "import { TestBed, async, inject, takeAsync, tick } from '@angular/core/testing';",
            "import { ChangeDetectorRef } from '@angular/core';",
            "import { Pipe, PipeTransform } from '@angular/core';",
            "",
            "import { ${EnterApiServiceName} } from '${service-filen-name}.service';",
            "import { ${EnterTheComponentName} } from './${filename:enter-the-file-name}.component';",
            "",
            "@Pipe({ name: 'translate' })",
            "export class FakeTranslatePipe implements PipeTransform {",
            "    transform(value: any, decimalPlaces: number): any {",
            "        return value;",
            "    }",
            "}",
            "",
            "describe('${EnterTheComponentName}', () => {",
            "    let fake${EnterApiServiceName} = {",
            "        operationAsExample: (args) => {",
            "            return Observable.of({",
            "                // Example of JSON returned by API operation",
            "            });",
            "        }",
            "    };",
            "",
            "    let fakeChangeDetectorRef = {",
            "        markForCheck: () => { }",
            "    };",
            "",
            "    let fixture, comp;",
            "",
            "    beforeEach(async(() => {",
            "        TestBed.configureTestingModule({",
            "            declarations: [",
            "                ${EnterTheComponentName},",
            "                FakeTranslatePipe",
            "            ],",
            "            providers: [",
            "                { provide: ChangeDetectorRef, useValue: fakeChangeDetectorRef },",
            "                { provide: ${EnterApiServiceName}, useValue: fake${EnterApiServiceName} },",
            "                ${EnterTheComponentName}",
            "            ]",
            "        })",
            "        .compileComponents()",
            "        .then(() => {",
            "            fixture = TestBed.createComponent(${EnterTheComponentName});",
            "            comp = fixture.componentInstance;",
            "            fixture.detectChanges();",
            "        });",
            "    }));",
            "",
            "    it('${assertion:should enter the assertion}', inject([${EnterApiServiceName}], (service: ${EnterApiServiceName}) => {",
            "        comp.${enterAMethodToCall}(${methodArguments});",
            "",
            "        // service.operationAsExample(args);",
            "        expect(${value:enterAValue}).toBe(${result:enterTheExpectedResult});",
            "    }));",
            "",
            "    it('${assertion2:should enter the assertion with fake async}', fakeAsync(() => {",
            "        fixture.detectChanges(); // trigger data binding",
            "        tick();                  // wait for async getQuote",
            "        fixture.detectChanges(); // update view with quote",
            "        expect(${value2:enterAValue}).toBe(${result2:enterTheExpectedResult});",
            "    }));",
            "});",
        ]
    },

    "Component with Inputs and Output Test Recipe": {
        "prefix": "ng2-test-component-properties",
        "description": "Recipe for testing a Component with Input, Output and HostBinding in Angular 2",
        "body": [
            "/*",
            " * Testing an Angular 2 component with Input, Output and HostBinding",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#component-with-inputs-outputs",
            " */",
            "",
            "import { TestBed, async } from '@angular/core/testing';",
            "import { By } from '@angular/platform-browser';",
            "import { DebugElement } from '@angular/core';",
            "import { ChangeDetectionStrategy } from '@angular/core';",
            "// import { ComponentFixtureAutoDetect } from '@angular/core/testing';",
            "",
            "import { ${EnterTheComponentName} } from './${filename:enter-the-file-name}.component';",
            "",
            "describe('${EnterTheComponentName}', () => {",
            "    beforeEach(async(() => {",
            "        TestBed.configureTestingModule({",
            "            declarations: [${EnterTheComponentName}],",
            "            providers: [",
            "                // for automatic change detection",
            "                // { provide: ComponentFixtureAutoDetect, useValue: true }",
            "            ]",
            "        })",
            "",
            "        // this is a temporary workaround, as fixture.detectChanges() isn't working", 
            "        // for components with ChangeDetectionStrategy.OnPush",
            "        .overrideComponent(${EnterTheComponentName}, {",
            "            set: { changeDetection: ChangeDetectionStrategy.Default }",
            "        })",
            "",
            "        // for components with ChangeDetectionStrategy.OnPush, .compileComponents() must",
            "        // always be called first",
            "        .compileComponents();",
            "    }));",
            "",
            "    it('${should enter the host binding assertion}', () => {",
            "        let fixture = TestBed.createComponent(${EnterTheComponentName});",
            "        let comp = fixture.componentInstance;",
            "        // manual calling change detection brings more power",
            "        fixture.detectChanges();",
            "",
            "        // example below for a class host binding",
            "        // e.g. @HostBinding('class.some-class') someClass = true;",
            "        let el = fixture.debugElement.nativeElement;",
            "        expect((fixture.debugElement.classes as any)['some-class']).toBeTruthy();",
            "    });",
            "",
            "    it('${should enter the input assertion}', async(() => {",
            "        let fixture = TestBed.createComponent(${EnterTheComponentName});",
            "        let comp = fixture.componentInstance;",
            "        fixture.detectChanges();",
            "",
            "        // example below for an input with a boolean value",
            "        // e.g. @Input() isSelected: boolean = false",
            "        comp.isSelected = true;",
            "        // method below must be called to update DOM for latest changes",
            "        fixture.detectChanges();",
            "",
            "        // example below as a button has class 'selected' for input isSelected",
            "        // e.g. <button [class.selected]=\"isSelected\"></button>",
            "        const selector = By.css('nav > button.selected');",
            "        let buttons = fixture.debugElement.queryAll(selector);",
            "        expect(buttons.length).toBe(1);",
            "    }));",
            "",
            "    it('${should enter the output assertion}', async(() => {",
            "        let fixture = TestBed.createComponent(${EnterTheComponentName});",
            "        let comp = fixture.componentInstance;",
            "        fixture.detectChanges();",
            "",
            "        // example to bind the event listener",
            "        // e.g. @Output() onClick = new EventEmitter()",
            "        var buttonWasClicked = false;",
            "        let sub = comp.onClick.subscribe(() => buttonWasClicked = true);",
            "",
            "        // example below for button click",
            "        // e.g. <button (click)=\"onClick.emit()\">Click me</button>",
            "        const selector = By.css('nav > .button');",
            "        let button = fixture.debugElement.query(selector);",
            "        // fire the event emitter. null is equivalent to $event",
            "        button.triggerEventHandler('click', null);",
            "        fixture.detectChanges();",
            "",
            "        // example as the button was clicked",
            "        expect(buttonWasClicked).toBeTruthy();",
            "        sub.unsubscribe();",
            "    }));",
            "});"
        ]
    },

    "Form Test Recipe": {
        "prefix": "ng2-test-form",
        "description": "Recipe for testing Forms in Angular 2",
        "body": [
            "/*",
            " * Testing an Angular 2 reactive form",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html#!#isolated-unit-tests",
            " */",
            "",
            "import { ${EnterTheComponentName} } from './${filename:enter-the-file-name}.component';",
            "",
            "describe('${EnterTheComponentName} form isolated tests', () => {",
            "    let comp;",
            "",
            "    // example of fake service with spy for later assertion",
            "    // let fakeService = jasmine.createSpyObj('MyService', [",
            "    //     'methodName'",
            "    // ]);",
            "    // fakeService.methodName",
            "    //     .and.returnValue(null);",
            "",
            "    beforeEach(() => {",
            "        comp = new ${EnterTheComponentName}(${fakeService:enter fake dependencies to inject});",
            "",
            "        // example of attribute override with spy for later assertion",
            "        // comp.messageStrip = jasmine.createSpyObj('MessageStrip', [ 'showMessage' ]);",
            "        // comp.messageStrip.showMessage.and.returnValue(null);",
            "",
            "        comp.ngOnInit();",
            "",
            "        // example of manually calling model initializer",
            "        // comp.model = { id: 10, name: 'Jim Hendrix' };",
            "    });",
            "",
            "    it('should initialize the form disabled and enable it by user\\'s choice', () => {",
            "        expect(comp.form.status).toBe('DISABLED');",
            "",
            "        // example enabling a form",
            "        comp.form.enable()",
            "        expect(comp.form.status).not.toBe('DISABLED');",
            "        expect(comp.form.controls['fieldName'].status).not.toBe('DISABLED');",
            "    });",
            "",
            "    it('should call a method that is overriden by spy', () => {",
            "        // example of service method called on ngOnInit",
            "        // expect(fakeService.methodName.calls.any())",
            "        //     .toBe(true, 'methodName was not called');",
            "    });",
            "",
            "    it('should edit and validate fields', () => {",
            "        comp.form.enable();",
            "",
            "        comp.form.controls['fieldName'].setValue('');",
            "        expect(comp.form.controls['fieldName'].status).toBe('INVALID');",
            "",
            "        comp.form.controls['fieldName'].setValue('new value');",
            "        expect(comp.form.controls['fieldName'].status).toBe('VALID');",
            "    });",
            "",
            "    it('should call a component method overriden by spy', () => {",
            "        comp.form.enable();",
            "",
            "        comp.form.controls['fieldName'].setValue('another value');",
            "",
            "        // example as if when a field is changed a message strip should apper",  
            "        // expect(comp.messageStrip.showMessage.calls.any())",
            "        //     .toBe(true, 'messageStrip.showMessage was not called');",
            "    });",
            "});"
        ]
    },

    "Guard Test Recipe": {
        "prefix": "ng2-test-guard",
        "description": "EMPTY - Recipe for testing route Guards in Angular 2",
        "body": [
            "// TODO"
        ]
    },

    "Mockbackend Test Recipe": {
        "prefix": "ng2-test-mockbackend",
        "description": "EMPTY - Recipe for testing Http service with MockBackend in Angular 2",
        "body": [
            "// TODO"
        ]
    },

    "Routes Test Recipe": {
        "prefix": "ng2-test-routes",
        "description": "EMPTY - Recipe for testing Routes in Angular 2",
        "body": [
            "// TODO"
        ]
    },

    "Service Test Recipe": {
        "prefix": "ng2-test-service",
        "description": "Recipe for testing a Service in Angular 2",
        "body": [
            "/*",
            " * Testing a Service",
            " * More info: https://angular.io/docs/ts/latest/guide/testing.html",
            " */",
            "",
            "import { TestBed, async, inject } from '@angular/core/testing';",
            "import { ${EnterTheServiceName} } from './${filename:enter-a-file-name}';",
            "",
            "describe('${EnterTheServiceName}', () => {",
            "    let service;",
            "",
            "    beforeEach(() => {",
            "        TestBed.configureTestingModule({",
            "            declarations: [${EnterTheServiceName}],",
            "            providers: [",
            "                ${EnterTheServiceName}",
            "                // for additional providers, write as examples below",
            "                // ServiceName,",
            "                // { provider: ServiceName, useValue: fakeServiceName },",
            "                // { provider: ServiceName, useClass: FakeServiceClass },",
            "                // { provider: ServiceName, useFactory: fakeServiceFactory, deps: [] },",
            "            ]",
            "        });",
            "    });",
            "",
            "    // you can also wrap inject() with async() for asynchronous tasks",
            "    // it('...', async(inject([...], (...) => {}));",
            "",
            "    it('${assertion:should enter the assertion}',",
            "        inject([${EnterTheServiceName}], (s: ${EnterTheServiceName}) => {",
            "            expect(${value:enterAValue}).toBe(${result:enterTheExpectedResult});",
            "            // expect('1').toEqual(1);",
            "        })",
            "    );",
            "});"
        ]
    }
}